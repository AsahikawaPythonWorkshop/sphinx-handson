
デジタルピンは緑の線を６に。



Swiftってなに？


    Swiftは　Amazon（AWS）のIaaSの競合であるRackspaceという会社が
    運営しているCloudFiles というサービスをオープンソース化した
    分散オブジェクトストレージシステムです。
    
    * 分散オブジェクトストレージ
    オブジェクトストレージは、ファイルではなくてメタデータと
    ファイルをまとめたオブジェクトを扱うストレージです。
    分散って付いてるのでわかるように、いくつかのサーバー上で分散して格納されます。
    
    * 単なるファイルサーバー？
    まぁ、一見ただのFTPみたいにみえます。
    できることも似たようなもんなので、使う側からしたら
    ポイントを押さえておけばそういう認識でもよいです。
    そのポイントはあとで話します。
    
    * Amazon S3相当（互換APIあり）
    そういえば、こんなサービスがどこかになかったかなーと思うわけですが、
    最初に名前の出たAWSのS3がまさにこの分散オブジェクトストレージだったりします。
    本当のところの仕組みはしらないけど、外から見ると似たような感じです。
    

    * OpenStackのObjectStorage機能を担当
    * OpenStackのGlance というコンポーネントにおいて、
    　いめーじを保存するバックエンドとして使われています。
      GlanceはAmazonEC2のAMIを管理する機能と同じで、
      そのストレージとしてSwiftを使います。
      AWSでもイメージをS3に保存しますよねたしか。
    
    ちなみに、OpenStackとはAWSのようなクラウドサービスを
    オープンソースで実現しようとしているプロジェクトです。
    IBM、RedHat、HP、DELLなどがプロジェクトに参加しており、
    開発がかなり活発で、Ubuntuにあわせて６ヶ月おきにリリースされています。
    ubuntu12.04に載っているOpenStackではかなり動作させやすくなっていますので、
    興味のある方はチャレンジしてみてください。
    インフラに近いものなので好みがわかれそうですが、
    ip, bridge, vlan, routing, firewall, dns, dhcpあたりから
    kvm, qemu, rabbitmq, MySQL, memcached
    python, gitあたりがふんだんに使われていて、非常に面白いです。
    
    
    
    ・分散オブジェクトストレージ
    
    分散オブジェクトストレージというストレージの仕組みです。
    最近は、ブログ系やSNS内でのアップロードされる画像データや
    ゲーム系のログ保存などウェブ系の爆発的なデータの増加にともない、
    普通のストレージでは対応しにくくなっている場面で、
    スケールアウトしやすい分散オブジェクトストレージが使われてきています。
    livedoorブログではSTFというシステム、facebookではhaystackというのが使われているらしい。
    
    とはいえ、外からみるとできることはアップロードとダウンロードという
    ごくごく簡単な仕組みになっており、
    HTTPでの通信でファイルの格納と取得が可能になっています。
    AmazonS3のAPIと互換がありs3curlなんかをそのまま使えたりします。
    でも、そこらへんの対応度はまだ低いらしい。
    

Swiftの仕組み

    ＠Swiftの構成
    Swiftは大きく４つのコンポーネントで動作します。
    
    １つめは、Proxy Serverです。
    ProxyServerはクライアント側からのリクエストを
    バックエンド側に仲介します。
    複数のProxyを用意して、DNSラウンドロビンやロードバランサなどで
    負荷分散してあげることができます。
    
    ２つめ〜４つめはストレージノードにあたり、
    ・Account Server
    ・Container Server
    ・Object Server
    と呼ばれるサーバーで構成されます。
    ContainerServerはコンテナはフォルダやディレクトリ、
    S3で言えばバケットにあたるものを管理するサーバーです。
    AccoutServerはそれらのコンテナをまとめているアカウントを管理するサーバーです。
    ObjectServerはそれぞれのコンテナ内のオブジェクト自体を管理するサーバーです。
    
    Auth Server
    認証を行うサーバー
    OpenStackではKeystoneというOpenStackで共通で使用する認証サーバーがある。
    
    
    3.6. Auditor
    Auditor はシステムを監視する。データの異常を検知した場合、
    他のサーバにあるレプリカを用 いて上書きされる。
    エラーについてはロギングされる。
    
    3.7. Replicator
    Replicator はデータの複製を行う。
    ハッシュを使用してオブジェクトのデータを比較し、
    異なって いた場合に複製を行う。複製には rsync を用いている。また削除に関しては、0 バイトのファイルを コピーすることで削除を行っている。削除済みのファイルは.ts の拡張子が付けられる。
    
    3.8. Updater
    負荷や障害などで、データの保存に失敗した時のための仕組みが
     Updater である。失敗すると、 ローカルファイルシステムのキューに入れられる。
    
    3.9. Reaper
    Reaper は Account Server にのみ存在する。
    アカウントが作り直された際に、古いアカウントの 
    データを削除するための仕組みが Reaper である。具体的には、
    古いアカウントで使用されていた オブジェクトやコンテナを削除する。
    
    3.10.	Ring
    Proxy Server や Replicator が、
    他のサーバを参照する際に Ring が使われる。
    Ring ファイル では、各サーバの情報及び、
    複製する数や各サーバの優先度などが含まれている。
    Ring の作成 や編集については swift-ring-builder 
    コマンドを介して行う。Ring の書式や swift-ring-builder
    コマンドの使い方については 4.5 節で述べる。


    
    次に、swiftの特徴と言うことでいいところわるいところをあげていきます。
    
    ＠Swiftのいいところ１
    Swiftでは、ファイルをアップロードするとストレージノードの中で
    自動で冗長化してデータを格納します。
    デフォルトの設定では３つのストレージに分散してデータを格納します。
    そのため、１つのストレージノードが壊れても、データがなくなることもないし、
    システムとして止まることもありません。
    
    なので、Swiftを稼働させるサーバーではRAIDは必須ではありません。
    安価なハードウェア（HDDは大容量がいいね）で構築することが可能です。
    
    
    ＠いいところ２
    冗長化のところで話したように分散して格納するわけですが、
    一回書き込んだらそれで終わりで、というわけではなく、
    常にバランスを保った状態を維持するようになっています。
    
    この　バランス　ということですが、これはRingという仕組みで管理しています。
    Ringでは、サーバーのディスク毎にバランスをとるための重みをつけることができ、
    その重みに従って分散します。
    もしデータがあったディスクの重みを0にしたら、
    しばらくすると、そこのディスクには何も格納されていない状態になります。
    
    
    ＠Swiftのいいところ３
    この分散、バランスされるということに加え、強力な自己修復機能をもっています。
    Swiftでは保存されたオブジェクトの破損や消失を自動検知して自動で修復してくれます。
    なので、ストレージノードが壊れても、Swiftを動くようにしてサーバーを
    戻してあげれば、自動で周りからデータを複製して復旧します。
    
    これは実際にサーバー内でオブジェクトを消してみるとわかりますが、
    かってに復活します。おもしろいです。
    
    あとで実演できれば実演します。
    
    
    ＠いいところ４
    ファイルに拡張属性を与えられる。
    ファイルと情報をセットとしたオブジェクトとして扱うことができる。
    
    
    ＠ウェブ配信もできる。
    認証を通してアップロード／ダウンロードすることはもちろんですが、
    公開設定をして、ウェブ配信するような設定にすると、
    CDN的な使い方も可能です。
    
    たとえば、想像ですけど、
    ゾーンを３つアメリカ、日本、ヨーロッパのサーバーに作り、
    ３つにレプリカを作るように設定しておけば、それだけで
    それぞれの地域にデータが分散され、負荷を分散でき、
    レスポンスも向上させることができます。
    そう簡単にいくかはわかりませんが・・・。
    
    
    ＠ここは注意
    分散はするけども、どのサーバーでも常に最新の状態が保たれるわけではない。
    分散途中やリバランスの途中は、サーバーによっては古いデータが参照される可能性がある。
    そこはそういう設計方針。
    
    

Swiftの活用方法
    １．オンラインストレージ
    Dropboxみたいなのを作ることができる。
    信頼性の高いストレージにできるし、スケールアウトも簡単なのでよい。
    
    ２．画像、動画用ストレージ
    livedoorのSTFやfacebookのhaystackのような画像データを
    さばくようなのにも適している。
    閲覧の負荷にはプロクシを、アップロードの負荷にはストレージノードを
    スケールアウトさせることで対応できる。
    
    ３．大量のログとかを詰め込む
    とりあえず残しておきたいものでも簡単につめこめる。
    安価なハードウェアで構築してもデータが飛ばないし、
    スケールアウトさせれば書き込みが増えても対応可能。
    
    ４．バックアップ
    バックアップ用にデータを入れておけば、
    勝手に冗長化されるので、非常にらく。
    ただ、
    
    ５．だめな利用例
    ・社内のファイルサーバ
    共有フォルダ的にアクセスできないし、細かい書き換えは不得意。
    また、せいぜい数TB程度であれば、RAIDディスクでも良いよね。
    ・整合性が優先されるシステム
    最新のデータが常に参照されるわけではないので、
    そういうのを期待する場合には使えない。


まとめ

    クライアントを選ばないアクセス方法（HTTP／REST）
    冗長化＆自動修復
    簡単スケールアウト
    用途は使いどころを絞ればよい選択肢



おまけ

    
    ということで、
    ウェブカメラとmotionを使って動体検知監視サーバーを作ろう。
    となるのはいいですが、
    動体検知して動画を録画したは良いが、
    どうみてもカメラの先に繋がっているPCが泥棒の目の前にあるわけで、
    それごと盗まれたり、壊されたら録画した意味がありません。
    
    そこでSwift！
    
    録画した動画を素早くSwiftサーバーへアップロードすることで
    すぐに複数のサーバーへ複製され、データが冗長化され、
    泥棒の手の届かないところにデータが保管されます。
    
    また、動画は容量がかなり大きいものです。ディスクがすぐにいっぱいになります。
    　まぁ、ディスクがいっぱいになるくらい泥棒が入る家には住みたくないけど
    そんな容量の問題もSwiftならサーバー追加で楽々スケールアウト！
    
    さらにarduinoを使って警告動作をすることで、
    泥棒になんとなく良くない気分にさせることがきっとできます。
    
    
    というようなことを
    GWに作ろうと思いましたが、GWは時間がなくて全然できなかったので、
    ちょっとハリボテレベルですが紹介します。
    

動画

    こんなの。


レシピ

    Linuxのサーバー
    USBカメラ　＋　必要なら延長ケーブル
    arduino、イーサシールド、サーボモータ
    swiftサーバー


手順

まずはメインの動体検知を作ります。
    
    Linuxのサーバーにウェブカメラをつなぎます。
    つなぐと、/dev/video0あたりができますのでこれを覚えておきます。
    
    次にmotionをインストールします。
    ubuntuであれば、apt-get install motionでOKです。
    
    次に、motionの設定ファイルを記載します。
        
    videodevice /dev/video0
    どのビデオデバイスを使うか書きます。
    
    threshold 2000
    動体検知する閾値です。いまいちよくわかりませんが、
    数値をだせるので、出しながらこんなもんかー
    って思うしかありません。
    
    webcam_*
    Liveで映像をみたいときにここの設定を変更します。
    
    on_XXXXX_YYYYYY
    イベントを記述します。
    これはあとでも使いますが、動画録画開始時や動体検知時にコマンドを実行できます。
    
    設定が終わったら起動します。
    今回は手動で起動するというｋとおにして。
    
    sudo -u motion motion -c motion.conf
    
    という感じで起動します。
    起動ユーザーをmotionにしているのは、
    apt-getでmotionをインストールすると、
    motionというユーザーが追加され、
    /dev/videoなんかを扱うグループのvideoグループに追加してくれるからです。
    通常のユーザーで起動しても/dev/video0にアクセスできずにエラーになります。
    
    ここまでやると、http://linux host:8081/にアクセスすると
    ウェブカメラの映像を確認できるはずです。
    また、動体検知させてやると、画面上にログがだーーーっとでるはずです。
    
    
次にswift。
    swiftサーバーは複数台で構築するのが本当のところですが、
    Ringで全てlocalhostのサーバーに複数のZone設定をすることで
    １台でも分散、冗長化、バランスしているところが確認できます。
    これは、　Swift All In Oneでぐぐってもらうと、手順が載ってますので、
    それを参考にしてもらうといいです。英語だけどコマンドばっかりなのでわかると思います。
    
    SwiftAllInOneの設定だけだとHTTPだけなので、
    confをいじって、
    ・HTTPSの設定
    ・認証の設定
    ・WEB配信の設定
    を行います。
    
    次に、アップロードするためのスクリプトをつくりまーす
    
    export ST_AUTH=https://swift.dkpyn.com/auth/v1.0
    export ST_AUTH_VERSION=1.0
    export ST_USER=vol03:admin
    export ST_KEY=admin
    
    swift upload motion $1

    ubuntuではapt-get install swiftとすると swiftというコマンドが使えるようになり、
    こんな感じで簡単に使うことができます。
    
    ここでは、motionというコンテナ、S3ならバケット、ディレクトリみたいなもんです、
    これに渡されてくるファイル名の$1のファイルをアップロードする処理になります。
    
    あとはこれをmotionの設定ファイルに書きます。
    
    先ほども話しましたが、motionではイベント時にコマンドを実行することができます。
    
    例えば、
    
    on_picture_save "echo hoge"
    
    こうかいておくと、動体検知し画像を保存したときに echo hogeが実行されます。
    
    イベントはそんなにはなく、動体検知〜終了までは以下のような感じ。
    
event start
[1] File of type 8 saved to: /var/motion/01-20120522063355.avi
movie start
motion detected
[1] File of type 1 saved to: /var/motion/01-20120522063355-07.jpg
picture save
motion detected
・
・
・
[1] File of type 1 saved to: /var/motion/01-20120522063356-00.jpg
picture save
event end
movie end1

    
    ここでは、撮影した動画をアップロードしたいので、

    on_movie_end /path/to/upload.sh %f
    
    とします。
    これで動画撮影が完了した段階でアップロードされるようになります。
    

次にarduino

    arduinoはなんかすごい手軽に扱えるマイコンで、
    ハードウェアの設計情報が公開されているオープンソースなハードウェアみたいです。
    統合環境がダウンロードできて、C言語っぽい言語でプログラムを書くことで
    手軽にぴこぴこできます。
    
    購入してみるとわかりますが、
    イタリア製だからなのか、ものすごく箱がおしゃれです。
    
    まぁ、私はそこまでハードウェアに詳しくないので、
    詳しい話は次回の勉強会で！
    
    今回は、先ほどと動画のアップロードと同じように動体検知したときに
    何かしらの動きをさせます。
    
    PC側から何を使ってarduino側に命令を投げるか、なんですが、
    まぁ、あとで見せれたら見せますが、シリアルで通信するのが
    単純で楽なんですが、今時のトレンドはウェブですので、
    イーサを使ってウェブAPIみたいなもんを叩いて動かします。
    
    arduinoは仕様が公開されているおかげで拡張するものが色々と発売されていて、
    それらはシールドと呼ばれています。
    上にささってるやつね。
    
    これはイーサシールドというもので、
    さしこんで、プログラムからIPを設定することで
    IPをもってLANにつなげます。

    で、まぁ、
    http://IP/motor/start
    にアクセスするとモーターが動くように作ります。
    
    作ったら、motion側で
    
    on_motion_detected curl http://IP/motor/start
    
    とすることで、動体検知時にモーターを動かすことができます。
    
    

ちなみに

    ここにいる人は割とオープンソース系かもしれませんが、
    Cはだめだー
    って人がいれば、マイクロソフトの.Netフレームワークでも、
    マイコン制御のライブラリがあるようです。
    
    kinect, .NET Micro Framework, Windows 8で次のような記事がありました。
    
    もしもソフト 〜 「もしもカフェ店長がソフトをつくったら？」
    http://www.youtube.com/watch?v=Mbe1UhQepCA
    
    もしもカフェ店長がソフトウェアをつくったら Part 1 - innovate - Site Home - MSDN Blogs 
    http://blogs.msdn.com/b/innovate/archive/2012/04/20/lt-4-24-gt.aspx
    
        
        
        
        
        
        



.. slide:: STF
 
    * livedoor
    * 大量の画像データの管理
    * ４億オブジェクト
    * 70TB


.. slide:: haystack
 
    * facebook
    * 大量の画像データの管理
    * 枚数は150億枚
    * 1.5PB (2009年5月1日 )


.. slide:: amazon s3:*
 
    * amazon aws
    * ファイルオブジェクトの管理
    * 枚数は150億枚
    * 1.5PB (2009年5月1日 )

 
.. slide:: 

    * 更新頻度が高いものには向いてない
    * とにかくぶちこんで保存しておきたいもの。
        * ブログの画像
        * ログ
        * バックアップファイル